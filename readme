Tables

	Table			|						Use								|	Stores...
	
	Users		-	Stores basic information about each user		-	(email, studentID)
	Courses		-	Stores basic information about each course		-	(name)
	Sections	-	Stores basic information about each section		-	(friendly name, courseID)
	Tests		-	Stores basic information about each test		-	(name, courseID(parent course), more...?)
	Topics		-	Stores basic information about each topic		-	(name)
	Questions	-	Stores basic information about a question		-	(question, topicID, subtopicID?, testID(parent test))
	Responses	-	Stores basic information about responses		-	(right/wrong, type of mistake, questionID, userID)
	Enrollments	-	Relates sections and users						-	(sectionID, userID)
	Roles		-	Relates roles, sections, and users				-	(sectionID, userID, role)
	
Still Wondering About...

	- Should we store a static map of persistent objects so we don't have to make a db request every time we need an object?
		We would have to do something like update the objects in the db every once in a while.
		Also have to make sure that they update if the server is gonna shut down.
		
	- Do we need to have a Java class to represent an Enrollment in order to get that information from a table using Hibernate?
	
	- A Role class?
		Define some permissions for different roles and maybe provide some other functionality...
		I had planned before to just store an integer or byte in the roles table that would mean
		like 'Owner' or 'Admin' or 'Enrolled'
